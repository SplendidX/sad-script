// SAD-Script
// Copyright (c) 2015, Brian Luft.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
// following conditions are met:
//
// - Redistributions of source code must retain the above copyright notice, this list of conditions and the following
// disclaimer.
// - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
// following disclaimer in the documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import function type-of (x)
import function hash (x)
import function to-string (x)
import function print (x)

// algebraic operators
import function + (a b)
import function - (a b)
import function * (a b)
import function / (a b)
import function % (a b)

// bitwise operators
import function bitwise-and (a b)
import function bitwise-or (a b)
import function bitwise-xor (a b)

// trigonometric functions
import function sin (x)
import function cos (x)
import function tan (x)
import function asin (x)
import function acos (x)
import function atan (x)
import function atan2 (y x)

// hyperbolic functions
import function sinh (x)
import function cosh (x)
import function tanh (x)

// exponential and logarithmic functions
import function exp (x)
import function log (x)
import function log10 (x)

// power operators and functions
import function ** (a b)
import function sqrt (x)

// rounding functions
import function ceil (x)
import function floor (x)

// boolean operators (no short circuiting)
import function and (a b)
import function or (a b)
import function not (x)

// comparison operators
import function = (a b)
import function < (a b)
import function <= (a b)
import function > (a b)
import function >= (a b)
import function << (a b)
import function >> (a b)

// list functions
import function list ()
import function list.length (self) 
import function list.get-at (self index) 
import function list.set-at! (self index value) 
import function list.insert-at! (self index value) 
import function list.remove-at! (self index) 

// string functions
import function string.length (self) 
import function string.get-at (self index) 

// Constants //////////////////////////////////////////////////////////////////////////////////////////////////////////

var TYPE-NIL 0
var TYPE-INT 1
var TYPE-DOUBLE 2
var TYPE-BOOL 3
var TYPE-STRING 4
var TYPE-LIST 5

// Basics /////////////////////////////////////////////////////////////////////////////////////////////////////////////

function nil? (self) {
   return [(type-of self) = TYPE-NIL]
}

function non-nil? (self) {
   return (not (nil? self))
}

function zero? (self) {
   return [[(type-of self) = TYPE-INT] and [self = 0]]
}

function true? (self) {
   return [[(type-of self) = TYPE-BOOL] and [self = true]]
}

function false? (self) {
   return [[(type-of self) = TYPE-BOOL] and [self = false]]
}

function println (x) {
   (print x)
   (print "\n")
}

function list.append! (self value) {
   var index [[self list.length] - 1]
   [self list.insert-at! index value]
}

function += (collection item) {
   [collection list.append! item]
}

function @ (self index) {
   switch (type-of self) {
      case TYPE-STRING {
         return [self string.get-at index]
      }
      case TYPE-LIST {
         return [self list.get-at index]
      }
      default {
         die "Expected string or list."
      }
   }
}

function @= (self index value) {
   [collection list.set-at! index value]
}

function length (self) {
   switch (type-of self) {
      case TYPE-STRING {
         return [self string.length]
      }
      case TYPE-LIST {
         return [self list.length]
      }
      default {
         die "Expected string or list."
      }
   }
}

// Queries ////////////////////////////////////////////////////////////////////////////////////////////////////////////

function reverse (list) {
   var new-list (list)
   var last-index [(count list) - 1]
   for i from 0 to last-index {
      [new-list += [list @ [last-index - i]]]
   }
   return new-list
}

function where (list func) {
   var new-list (list)
   for x in list {
      if (true? (func x)) {
         [new-list += x]
      }
   }
   return new-list
}

function select (list func) {
   var new-list (list)
   for x in list {
      [new-list += (func x)]
   }
   return new-list
}

function any (list) {
   return [(count list) > 0]
}

// dict ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Structure:
// A list of buckets, where the index into the list equals [hash % number-of-buckets]
// Each bucket is a list of pairs.
// Each pair is a two-element list: (list key value)

var DICT-BUCKET-COUNT 37

function dict () {
   var x = (list)
   for i from 1 to DICT-BUCKET-COUNT {
      [x += nil]
   }
   return x
}

// returns nil if the key does not exist in the dict.
function dict.get (self key) {
   var bucket-index [(hash key) % DICT-BUCKET-COUNT]
   var bucket [self @ bucket-index]
   if [bucket nil?] {
      return nil
   } else {
      for pair in bucket {
         var pair-key [pair @ 0]
         if [pair-key = key] {
            return [pair @ 1]
         }
      }
      return nil
   }
}

// returns true if a value was overwritten, false if not.
function dict.set! (self key value) {
   var new-pair (list key value)
   var bucket-index [(hash key) % DICT-BUCKET-COUNT]
   var bucket [self @ bucket-index]
   if [bucket nil?] {
      set bucket (list new-pair)
      [self @= bucket-index bucket]
   } else {
      // If the key already exists then overwrite it.
      for pair at i in bucket {
         if [[pair @ 0] = key] {
            [bucket @= i new-pair]
            return true
         }
      }
      [bucket += new-pair]
   }
   return false
}

function dict.remove! (self key) {
   var bucket-index [(hash key) % DICT-BUCKET-COUNT]
   var bucket [self @ bucket-index]
   if (not [bucket nil?]) {
      for pair at i in bucket {
         if [[pair @ 0] = key] {
            [bucket list.remove-at! i]
            return true
         }
      }
   }
   return false
}

// hashset ////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Structure: 
// A dict where all the values are ignored (but happen to be set to true)

function hashset () {
   return (dict)
}

function hashset-add (self key) {
   return [self dict.set! key true]
}

function hashset-has? (self key) {
   return (true? [self dict.get key])
}

function hashset-remove (self key) {
   [self dict.remove! key]
}

// chain //////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Structure:
// A doubly-linked list: (list head-node count)
// Each node: (list value prev next)

function chain () {
   return (list nil 0)
}
var chain.HEAD 0 // chain-node or nil
var chain.COUNT 1 // int

function chain-node (value prev next) {
   return (list value prev next)
}
var chain-node.VALUE 0 // any
var chain-node.PREV 1 // chain-node or nil
var chain-node.NEXT 2 // chain-node or nil

function chain.push! (self value) {
   var old-head [self @ chain.HEAD]
   var new-head (chain-node value nil old-head)
   [self @= chain.HEAD new-head]
   if (non-nil? old-head) {
      [old-head @= chain-node.PREV new-head]
   }
   [self @= chain.COUNT [[self @ chain.COUNT] + 1]]
}

function chain.pop! (self) {
   var old-head [self @ chain.HEAD]
   if (nil? old-head) {
      return nil
   } else {
      var new-head [head @ chain-node.NEXT]
      [self @= chain.HEAD new-head]
      if (non-nil? new-head) {
         [new-head @= chain-node.PREV nil]
      }
      [self @= chain.COUNT [[self @ chain.COUNT] - 1]]
      return [old-head @ chain-node.VALUE]
   }
}

function chain.remove! (self node) {
   var prev [node @ chain-node.PREV]
   var next [node @ chain-node.NEXT]
   if (nil? prev) { // this is the head node
      [self @= chain.HEAD next]
   } else { // this is a middle or tail node
      [prev @= chain.NEXT node]
   }
   if (non-nil? next) {
      [next @= chain.PREV prev]
   }
   [self @= chain.COUNT [[self @ chain.COUNT] - 1]]
}
